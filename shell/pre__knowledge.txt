Terminal (ターミナル)
  terminalは、ユーザとコンピュータ間の相互作用を可能にするテキストベースのインターフェースである。
  入出力が可能なハードウェアとして、console とも呼ぶ。コマンドの入力を受けて出力する場所であり、
  コマンドを入力するshellを実行するためのツール。主にシステム管理、ファイル管理、プログラム実行、スクリプト作成などに使用。

主要概念
  シェル(Shell): ターミナルでコマンドを解釈して実行するプログラム。様々な種類のシェルが存在し、代表的にBash、Zsh、Fishなどがある。
  プロンプト(Prompt): ユーザーがコマンドを入力できる場所を表示する文字列。通常、ユーザー名、ホスト名、現在のディレクトリなどが含まれる.
  コマンド(Command): 特定のタスクを実行するために入力するテキスト。たとえば、ls コマンドは、現在のディレクトリのファイルおよびディレクトリをリストする。
  パス(Path): ファイルやディレクトリの位置を示す文字列。 絶対経路と相対経路に分かれる.

Shell (シェル) 
  shellはユーザとオペレーティング システム カーネル間のインターフェースで、ユーザが入力したコマンドを解析し、実行する役割。 
  shellは、コマンドを入力するインタフェースだけでなく、スクリプトを実行して複数のジョブを自動化できるツール。

shellの種類
  1. Bash (Bourne Again Shell): 最も広く使われているシェルの一つで、LinuxとmacOSの基本シェル。
     Bourne Shell(sh)の拡張版で、さまざまな機能と便利なスクリプト作成機能を提供。
  2. Zsh (Z Shell): Bashと似ているが、ユーザー定義が容易でプラグインシステムにより機能拡張が可能。
     Oh My Zshのようなフレームワークにより、より強力で直観的な使用が可能。
  3. Fish (Friendly Interactive Shell): ユーザーフレンドリーなシェルで、直感的なコマンドの自動完成と構文強調機能を提供。
     設定が簡単で、使いやすいインターフェースを備えている。
  4. Ksh (Korn Shell): パフォーマンスとスクリプト作成機能に優れたシェルで、商用ユニックス システムで主に使用。
  5. Tcsh (TENEX C Shell): C プログラミング言語の文法と類似したコマンド構文を提供し、C Shell(csh)の向上したバージョン。

シェルの機能
  1. コマンドの解析と実行: ユーザーが入力したコマンドを解析し、そのコマンドを実行。
     コマンドはファイル探索、プログラム実行、ファイル操作など多様な作業を遂行することができる。
  2. スクリプトの作成: シェル スクリプトを介して反復タスクを自動化。
     条件文(if)、反復文(for、while)などを使用して複雑なロジックを実現。
  3. 環境変数管理: シェルは環境変数を介してシステムの設定情報を管理。
     ex) PATH, HOME, USER など
  4. リダイレクションおよびパイプライン:コマンドの入出力をファイルや他のコマンドでリダイレクションできる。
     パイプライン(|)を使用して、あるコマンドの出力を別のコマンドの入力として使用。
  5. バックグラウンドジョブの管理: コマンドをバックグラウンドで実行でき、バックグラウンドジョブを管理。

使用しているshellの確認の仕方
  1. echo $SHELL コマンドの使用: このコマンドは、現在使用中のシェルのパスを出力。
     例えば、/bin/bash や/bin/zsh のような結果が見られる。
  2. ps -p $$ コマンドの使用: このコマンドは、現在のプロセスのシェル情報を示している。 
     CMD またはCOMMAND 列で使用中のシェルが確認できる。
  3. echo $0 コマンドの使用: このコマンドは、現在のシェルの名前を出力します。 
     ただし、この方法はスクリプト内で実行する場合、スクリプト名を出力できるので注意が必要。

ファイルパス (path) 
  ファイルパスは、ファイルシステムで特定のファイルやディレクトリの位置を表す文字列。 
  ファイル経路は絶対経路(Absolute Path)と相対経路(Relative Path)で分ける。
  1. 絶対経路(Absolute Path):絶対経路はファイルシステムのルートディレクトリ(/or C:\)から始まり、
     ファイルやディレクトリまでの全体経路を表す。
  2. 相対経路（Relative Path）:相対経路は、現在作業中のディレクトリ（CWD）を基準にファイルやディレクトリの位置を示す。
     相対経路は . (現在のディレクトリ) と .. (上位ディレクトリ) を使用することができる。

  相対経路文字
    . : 現在ディレクトリ
    .. : 上位ディレクトリ
    ~ : ユーザーホームディレクトリ

カレントディレクトリ
  カレントディレクトリ(Current Directory): 現在ユーザーが作業中のディレクトリ。
  ターミナルでコマンドを実行するときにこのディレクトリが基準となり、ファイルまたは他のディレクトリにアクセス。

  現在のディレクトリ確認方法
    pwd コマンドの使用:pwd は"print working directory"の略で、現在作業中のディレクトリの絶対パスを出力。

  現在のディレクトリ変更方法
    cd コマンド使用:cd は"change directory"の略で、現在作業中のディレクトリを変更。
       ex) cd /[PATH]/to/[DIRECTORY]
    上記の相対経路文字と使用可能。
       ex) cd .. , cd ~

ターミナルのショートカットキー（履歴機能[arrow up]、候補機能[tab]、など）
  ターミナルでの作業時に使用できる複数の有用なショートカット。 使用時の作業効率を大幅に高める。
  1. 履歴機能 (History Navigation):
     上矢印キー (↑): 以前に入力したコマンドを読み込む。
     下矢印キー (↓): 次のコマンドを読み込む。
     Ctrl + R: コマンド履歴から特定の文字列を含むコマンドを検索。
  2. 自動完成機能 (Auto-completion):
     タップ (Tab): 現在入力中のコマンドやファイル/ディレクトリ名を自動完成。 2回押せば、可能なすべての候補機能を見せてくれる。
  3. カーソル移動 (Cursor Navigation):
     Ctrl + A: カーソルを現在の行の最初に移動。
     Ctrl + E: カーソルを現在の列の端に移動。
     Ctrl + B: カーソルを一文字左に移動。
     Ctrl + F: カーソルを一文字右に移動。
     Alt + B: カーソルを一つの単語の左に移動。
     Alt + F: カーソルを一つの単語の右に移動。
  4. テキスト編集 (Text Editing):
     Ctrl + U: カーソルから列の開始までのテキストを削除。
     Ctrl + K: カーソルから列の端までのテキストを削除。
     Ctrl + W: カーソルの前の単語を削除。
     Ctrl + H: カーソルの前の一文字を削除(バックスペースと同じ)。
     Ctrl + D: カーソル位置の一文字を削除（デリートと同じ）。
  5. コマンド実行制御 (Command Control):
     Ctrl + C: 現在実行中のコマンドを強制終了。
     Ctrl + Z: 現在実行中のコマンドを一時停止し、バックグラウンドで送信する。
     fg: バックグラウンドで一時停止されたコマンドをフォアグラウンドにインポートする。
     bg: バックグラウンドで一時停止されたコマンドを実行し続ける。
  6. ターミナル制御 (Terminal Control):
     Ctrl + L: ターミナル画面の消去 (clear 命令語と同じ).
     Ctrl + S: ターミナル出力一時停止 (多用しない).
     Ctrl + Q: 一時停止したターミナル出力を再開 (多用しない).
     Ctrl + D: ターミナルセッションを終了 (exit 命令語と同じ).
