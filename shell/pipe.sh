#!/bin/bash
# shell script / pipe

# パイプはプログラム間のデータ転送を可能にし、 
# 複数のコマンドを効果的に組み合わせることができる。

# パイプの基本構造

# コマンド1 | コマンド2

# コマンド1の出力がコマンド2の入力に渡される。 
# これにより、個々のコマンドが実行する機能を組み合わせることができる。

# パイプ連結:

# 1. 複数のパイプを連結することができる。
# 2. コマンド1 | コマンド2 | コマンド3 のように構成することができる。
# 3. 各コマンドの出力が次のコマンドの入力に伝達される。

# パイプの主な使用例

# 1. データ処理とフィルタリング:

# ls | grep "file": ls コマンドの出力のうち、"file"が含まれているファイルのみをフィルタリング。
# cat file.txt | wc -l: file.txt ファイルの行数を数える。

# 2. データ変換:

# cat file.txt | tr a-z A-Z: file.txt ファイルの内容をすべて大文字に変換。

# 3. データの並び替え及び要約:

# ps aux | sort -nk 3: プロセスリストをメモリ使用量順に並べ替える。
# df -h | awk '{print $5, $6}': ファイル システム使用量の要約情報の出力。

# 4. プロセス制御:

# find / -name "*.txt" | xargs rm -f: ルートディレクトリからすべての.txtファイルを削除。

# 現在のディレクトリのファイルリストを出力し、ファイルサイズを降順に並べ替えた後、上位5つのファイルの名前とサイズを出力するコードを作成。
ls -lS | head -n 5 | awk '{print $5, $9}'