	clone - 既に初期化されたリモートリポジトリを複製して開発する場合、
		複製作業をGitではクローン(Clone)と呼び、git clone コマンドで実装されている。 
		クローンを作成するには、git のリポジトリのアドレスを知る必要がある。 
		git clone [REPO_URL] [DIR]
		この形式で使用され、[REPO_URL]にはクローンするリポジトリのアドレス、
		[DIR]はリポジトリを複製する場所を指定。
		[DIR]は省略可能であり、通常は省略する。

	branch - ブランチリストを確認するコマンド

	基本的な使い方

		git branch [新しいブランチ名]でブランチを生成でき
		git branch -vでリストと最近コミット確認。
		git branch -d [削除するブランチ名] ブランチ削除
		git branch -D で強制葬祭などができる。ワークスペースの管理に使用される主要コマンド

	checkout - 対象エンティティを切り替えるコマンド。 ファイル、コミット、ブランチの3つで動作。

	基本的な使い方

		git checkout [BRANCH_NAME] で指定されたブランチを切替。
		git checkout-b [NEW_BRANCH_NAME]で新しいブランチを作成し、切り替え
		git checkout [COMMIT_HASH] で特定コミットで作業ディレクトリを更新。
		git checkout -- [FILE_NAME] で最後のコミットから特定のファイルを回復。 などの使い方がある。

	log -GITリポジトリのコミット履歴を照会するときに使用。 デフォルトでは、
		実行時の現在のブランチのコミット履歴出力。コミット ハッシュ、作成者、日付、
		コミット メッセージなどが含まれる。

		基本的な使い方

		git log - 最も基本的な使い方。 コミット·ヒストリーを最新のコミットから順次示す。
		git log-n [NUMBER] 最近NUMBER 犬のコミットのみ表示。
		git log -oneline 各コミットを一行で簡略に表現。
		git log --graphブランチと併合ヒストリーをグラフで視覚化して表現。他のオプションと一緒に使用可能。
		git log -author="[AUTHOR-NAME]特性作成者のコミットのみをフィルタリングして表示。
		git log --since="2024-06-13" --until="2024-07-10" 特定の日付範囲内のコミットのみ表示。
		git log -p [FILE-NAME] 指定されたファイルの変更事項を表示。 
						-p オプションはパッチ(patch)形式で変更事項を表示。
		git log -- stat 各コミットのファイル変更統計を表示。
		git log --grep="[SEARCH-TREM]" カーミットメッセージで特定のキーワードを検索します。	
		git log -- pretty=format: "%h - %an, %ar: %s" 出力形式を指定。 
							例えば、簡略なハッシュ(%h)、作成者名(%an)、相対時間(%ar)、
							コミットメッセージ(%s)などを含むことができる。

	status - gitリポジトリの現在の状態を確認するのに。
		作業ディレクトリの状態: 現在の作業ディレクトリに修正されたファイル、
		追加されたファイル、削除されたファイルなどを確認。
		ステージ領域の状態:コミットを取り、準備されたファイル（ステージされたファイルを表示します。
		追跡されないファイル: gitが追跡しない新しいファイルを表示します。

		git statusを実行すると確認できる情報

		Untracked files:gitが追跡しないファイル。 これらのファイルはステージングされていない状態。
		Changes not staged for commit 修正されたがまだステージングされていないファイル。
		Changes to be committed:コミットのためにステージングされたファイル。

	add - gitでファイルをステージング領域に追加するために。 
		次のコミットに含まれるファイルと変更を準備するプロセス。 
		gitadd を使ってファイルをステージングすると、そのファイルの現在の状態が次のコミットに含まれる。
		addはファイルをステージングするときの状態を記録。 したがって、ファイルをステージングした後、
		変更事項が生じた場合、再びaddを使用しなければ変更事項を含めることができない。
		addはファイルを削除したり名前を変更する作業もステージング可能。
	
	基本的な使い方

		git add [FILENAME] 特定ファイル追加
		git add【FILENAME1】、【FILENAME2】複数のファイルを追加
		gitadd【DIRECTORYNAME】/ディレクトリ全体の追加
		git add. すべての変更事項を追加。
		git add *.txt 特定パターンのファイル追加

	commit - ステージング領域にある変更事項をローカルリポジトリにコミットして永久に記録するのに使用。 
		コミットはプロジェクトの特定地点での状態を指定、メッセージを通じて変更事項に対する説明を追加可能。

	基本的な使い方

		git commit -m "コミットメッセージ" 基本的なコミット
		git commit -a -m "コミットメッセージ" ファイルをステージングしてコミット。
									作業ディレクトリで修正されたすべてのファイルを自動的にステージングしてコミット。
									ただし、新しく追加されたファイルは含むx。
									gitcommitコミットメッセージエディタを開く。 コミット メッセージを入力できるようにする。
		git commit --amend 最後のコミットを修正。 メッセージを変更するか、ファイルを追加/削除可能。
	
	※ コミットメッセージを作成するコツ
		タイトル: 簡潔に変更事項を要約。
		本文:必要であれば追加説明を含むことができる。

	diff - ファイルの変更を比較し、違いを示すために使用。
		作業ディレクトリとステージング領域、または 2 つのコミット間の違いを確認するのに有用。

	基本的な使い方

		git diff 現在の作業ディレクトリで修正されたファイルとステージング領域のファイルとの違いを確認。
		git diff --cached、 --staged ステージング領域と最後のコミット間の違いを確認。
		git diffコミット1、コミット2のコミット間の違いを確認。
		git diff [FILENAME] 特定ファイルの違いを確認。
		git diffブランチ1ブランチ2ブランチ間の差異を確認。

	使用可能なオプション

		--name-only 変更されたファイルの名前のみ表示。
		--statファイルの変更統計を表示。
		--color-words変更された単語を強調して表示。	

	push - ローカル リポジトリの変更をリモート リポジトリにアップロードするために。
	
	基本的な使い方

		gitpush基本遠隔リポジトリ（origin）の基本ブランチ（通常はmainまたはmasterに
						現在のブランチの変更事項をプッシュ。
		git push [REMOTE_REPOSITORY][BRANCH] 特定の遠隔リポジトリとブランチにプッシュ。
		git push-u [REMOTE_REPOSITORY][BRANCH] 遠隔リポジトリに新しいブランチをアップロードし、
							現在のブランチを遠隔ブランチに追跡するよう設定。
	オプション

		-uまたは --set-upstream: 現在のブランチをリモートブランチに追跡するように設定。
		-f または --forse: 強制的にプッシュ。 ご使用時のご注意ください。
		--all: すべてのローカルブランチをリモート ストレージにプッシュ。
		--tags: すべてのタグをリモート ストレージにプッシュ。

- pull - 遠隔リポジトリの変更事項をローカルリポジトリに持ってきて併合するのに使用。
	fetch、mergeコマンドを一度に実行するのと同じ。
	実行時の変更とマージのステータスを出力。
	チームメンバーが作業した最新の変更事項をローカルリポジトリに反映するのに非常に簡単。
	基本的な使い方
	git pull基本リモートストアの基本ブランチから変更事項を取得し、現在のブランチに併合。
	git pull [REMOTE_REPOSITORY][BRANCH] 特定のリモート ストレージとブランチから変更事項を取得する。
	オプション 
	--rebase:マージの代わりにリベースを使用。 リベースはコミットヒストリーをよりすっきりと維持可能。
	--no-commit:変更事項を併合するが、自動的にコミットしない。 これにより、マージコミットを手動で調整可能。
	--ff-only:Fast-forwardの併合のみ許可。Fast-forwardの併合が不可能な場合、併合を中断。

- fetch - リモート ストレージの変更をローカル ストレージにインポートしますが、
	ローカル ブランチにマージすることはありません。 
	リモート リポジトリの変更を更新して、ローカル リポジトリで追跡できるようにする。
	ローカルブランチに影響を与えることなく、リモート ストレージの最新の状態を取得するときに容易に。
	頻繁に使用する時、上記のpullコマンドを使用する時に発生しうる併合衝突を減らすことができる。
	基本的な使い方
	git fetch リモート ストレージのすべてのブランチから変更事項を取得する。
	git fetch [REMOTE_REPOSITORY][BRANCH] 特定のリモート ストレージとブランチから変更事項を取得する。
	オプション
	--all すべてのリモート ストレージから変更を取得する。
	--prune: リモート ストレージから削除されたブランチをローカルからも削除。
	--dry-run:実際に変更事項を持ってくるのではなく、どのような変更事項があるのかあらかじめ確認可能。

	merge - 現在チェックアウトされているブランチに他のブランチの変更事項をマージするのに使用。
		マージすることで二つのブランチのヒストリーを一つにまとめることができる。
		通常、チーム作業時に複数の人の作業内容を一つのブランチに合わせる時に有用。
		基本的な使い方
		gitmerge[BRANCH]現在チェックアウトされているブランチに[BRANCH]の変更点を併合。
	
	オプション

		--no--ff: Fast-forwardの併合を防止し、常に新しい併合コミットを生成。
		--squash:併合コミットを一つに合わせる。 併合後のコミットは手動。
		--abort:併合中に問題が発生すると、併合を中断して以前の状態に戻す。
