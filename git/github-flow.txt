Github FlowはGithubが提案する簡単で効率的なブランチ管理戦略。 主にソフトウェア開発でコードの変更を管理および配布するために使用。
先に作成したPullRequestを活用して協業プロジェクトを効率的に遂行する作業の流れ。

Github Flow 進行段階
  1.メインブランチ(main branch):基本ブランチ。mainブランチは常に配布可能な状態に維持。
    このブランチに直接コミットすることなく機能ブランチを介して併合。
  2.機能ブランチ(feature branch)作成: 新しい作業ブランチの作成。 新機能やバグ修正の開始時にメインブランチから機能ブランチを作成。
  3.コミット(commit): 作業内容コミット。 機能ブランチで作業した内容を小さな単位でコミット。
    各コミットメッセージは明確に変更点を説明する必要がある。
  4.プッシュ(push): リモートストレージにプッシュ。
  5.PullRequest生成: Githubで機能ブランチをmainブランチに併合するためにPullRequestを生成。
  6.コードレビューと併合(merge): コードレビュー、PullRequestに自動化されたテストを設定し、コードの品質確認、併合が行われる。
  7.配布(deploy): mainブランチに併合された変更は、自動的に配布されるか、手動で配布されることができる。
    Github Flowは頻繁に配布し、小さな単位で変更事項を配布した方が良い。

追加情報
  持続的統合(CI): Github ActionsのようなCIツールを使用し、PullRequestごとに自動的にテストを実行可能。
  持続的配布(CD): 持続的な配布を設定し、メインブランチに併合されるたびに自動的に配布することができる。

git flowとgithub flowの違い
  1. ブランチ
     git flow: 開発、リリース、メンテナンスのためのさまざまなブランチモデルを使用。(develop, feature, release, hotfix ブランチなど)
     github flow: シンプルなブランチングモデルを採用。主にmasterブランチとフィーチャーブランチを使用。

  2. リリース管理
     git flow: 別途のリリースブランチを使用して体系的なリリース管理が可能。
     github flow:リリース管理が比較的簡単。主にmasterブランチに併合してリリースを行う。

  3. 配布頻度
     git flow: 定期的なリリースサイクルを持つため、配布頻度が相対的に低い。
     github flow: 開発完了時に迅速な配布が可能なので、配布頻度が相対的に高い。

  4. 開発速度
     git flow: ブランチングモデルが複雑で、相対的に開発速度が遅くなることがある。
     github flow: 単純なブランチングモデルを使用するので、開発速度が速い可能性がある。

  5. 適したプロジェクト
     git flow: 大規模プロジェクト、厳格なリリース管理が必要なプロジェクトに適合。
     github flow: 小規模プロジェクト、迅速な配布が必要なプロジェクトに適合。
